{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"../../NativeModules/specs/NativeSourceCode","data":{"isAsync":false}},{"name":"./getDevServer","data":{"isAsync":false}},{"name":"../../Network/fetch","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _NativeSourceCode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../../NativeModules/specs/NativeSourceCode\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var getDevServer = _$$_REQUIRE(_dependencyMap[4], \"./getDevServer\");\n\n  var fetch;\n\n  function isSourcedFromDisk(sourcePath) {\n    return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n  }\n\n  function symbolicateStackTrace(stack) {\n    var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response, json;\n\n    return _regenerator.default.async(function symbolicateStackTrace$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!fetch) {\n              fetch = global.fetch || _$$_REQUIRE(_dependencyMap[5], \"../../Network/fetch\").fetch;\n            }\n\n            devServer = getDevServer();\n\n            if (devServer.bundleLoadedFromServer) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error('Bundle was not loaded from the packager');\n\n          case 4:\n            stackCopy = stack;\n            _NativeSourceCode$get = _NativeSourceCode.default.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;\n\n            if (scriptURL) {\n              foundInternalSource = false;\n              stackCopy = stack.map(function (frame) {\n                if (frame.file == null) {\n                  return frame;\n                }\n\n                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n                  return _objectSpread({}, frame, {\n                    file: scriptURL\n                  });\n                }\n\n                foundInternalSource = true;\n                return frame;\n              });\n            }\n\n            _context.next = 9;\n            return _regenerator.default.awrap(fetch(devServer.url + 'symbolicate', {\n              method: 'POST',\n              body: JSON.stringify({\n                stack: stackCopy\n              })\n            }));\n\n          case 9:\n            response = _context.sent;\n            _context.next = 12;\n            return _regenerator.default.awrap(response.json());\n\n          case 12:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json.stack);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  module.exports = symbolicateStackTrace;\n});","lineCount":92,"map":[[2,0,11,0],[10,0,15,0],[16,0,13,0],[16,6,13,6,"getDevServer"],[16,18,13,18],[16,21,13,21,"require"],[16,32,13,28],[16,69,13,0],[18,0,18,0],[18,6,18,4,"fetch"],[18,11,18,0],[20,0,22,0],[20,11,22,9,"isSourcedFromDisk"],[20,28,22,0],[20,29,22,27,"sourcePath"],[20,39,22,0],[20,41,22,56],[21,0,23,2],[21,11,23,9],[21,12,23,10],[21,20,23,18,"test"],[21,24,23,10],[21,25,23,23,"sourcePath"],[21,35,23,10],[21,36,23,9],[21,40,23,38],[21,48,23,46,"test"],[21,52,23,38],[21,53,23,51,"sourcePath"],[21,63,23,38],[21,64,23,2],[22,0,24,1],[24,0,26,0],[24,11,26,15,"symbolicateStackTrace"],[24,32,26,0],[24,33,27,2,"stack"],[24,38,26,0],[25,0,26,0],[27,0,26,0],[28,0,26,0],[29,0,26,0],[30,0,26,0],[31,0,40,2],[31,16,40,6],[31,17,40,7,"fetch"],[31,22,40,2],[31,24,40,14],[32,0,41,4,"fetch"],[32,14,41,4,"fetch"],[32,19,41,9],[32,22,41,12,"global"],[32,28,41,18],[32,29,41,19,"fetch"],[32,34,41,12],[32,38,41,28,"require"],[32,49,41,35],[32,91,41,28],[32,92,41,59,"fetch"],[32,97,41,4],[33,0,42,3],[35,0,44,8,"devServer"],[35,12,44,8,"devServer"],[35,21,26,0],[35,24,44,20,"getDevServer"],[35,36,44,32],[35,38,26,0],[37,0,26,0],[37,16,45,7,"devServer"],[37,25,45,16],[37,26,45,17,"bundleLoadedFromServer"],[37,48,26,0],[38,0,26,0],[39,0,26,0],[40,0,26,0],[42,0,26,0],[42,18,46,10],[42,22,46,14,"Error"],[42,27,46,10],[42,28,46,20],[42,69,46,10],[42,70,26,0],[44,0,26,0],[45,0,49,6,"stackCopy"],[45,12,49,6,"stackCopy"],[45,21,26,0],[45,24,49,18,"stack"],[45,29,26,0],[46,0,26,0],[46,36,51,22,"NativeSourceCode"],[46,62,51,39,"getConstants"],[46,74,51,22],[46,76,26,0],[46,78,51,9,"scriptURL"],[46,87,26,0],[46,112,51,9,"scriptURL"],[46,121,26,0],[48,0,52,2],[48,16,52,6,"scriptURL"],[48,25,52,2],[48,27,52,17],[49,0,53,8,"foundInternalSource"],[49,14,53,8,"foundInternalSource"],[49,33,52,17],[49,36,53,39],[49,41,52,17],[50,0,54,4,"stackCopy"],[50,14,54,4,"stackCopy"],[50,23,54,13],[50,26,54,16,"stack"],[50,31,54,21],[50,32,54,22,"map"],[50,35,54,16],[50,36,54,26],[50,46,54,27,"frame"],[50,51,54,26],[50,53,54,49],[51,0,55,6],[51,20,55,10,"frame"],[51,25,55,15],[51,26,55,16,"file"],[51,30,55,10],[51,34,55,24],[51,38,55,6],[51,40,55,30],[52,0,56,8],[52,25,56,15,"frame"],[52,30,56,8],[53,0,57,7],[55,0,63,6],[55,20,63,10],[55,21,63,11,"foundInternalSource"],[55,40,63,10],[55,44,63,34,"isSourcedFromDisk"],[55,61,63,51],[55,62,63,52,"frame"],[55,67,63,57],[55,68,63,58,"file"],[55,72,63,51],[55,73,63,6],[55,75,63,65],[56,0,65,8],[56,43,65,19,"frame"],[56,48,65,8],[57,0,65,26,"file"],[57,20,65,26,"file"],[57,24,65,30],[57,26,65,32,"scriptURL"],[58,0,65,8],[59,0,66,7],[61,0,68,6,"foundInternalSource"],[61,16,68,6,"foundInternalSource"],[61,35,68,25],[61,38,68,28],[61,42,68,6],[62,0,69,6],[62,23,69,13,"frame"],[62,28,69,6],[63,0,70,5],[63,15,54,16],[63,16,54,4],[64,0,71,3],[66,0,26,0],[67,0,26,0],[67,46,73,25,"fetch"],[67,51,73,30],[67,52,73,31,"devServer"],[67,61,73,40],[67,62,73,41,"url"],[67,65,73,31],[67,68,73,47],[67,81,73,30],[67,83,73,62],[68,0,74,4,"method"],[68,14,74,4,"method"],[68,20,74,10],[68,22,74,12],[68,28,73,62],[69,0,75,4,"body"],[69,14,75,4,"body"],[69,18,75,8],[69,20,75,10,"JSON"],[69,24,75,14],[69,25,75,15,"stringify"],[69,34,75,10],[69,35,75,25],[70,0,75,26,"stack"],[70,16,75,26,"stack"],[70,21,75,31],[70,23,75,33,"stackCopy"],[71,0,75,25],[71,15,75,10],[72,0,73,62],[72,13,73,30],[72,14,26,0],[74,0,26,0],[75,0,73,8,"response"],[75,12,73,8,"response"],[75,20,26,0],[76,0,26,0],[77,0,26,0],[77,46,77,21,"response"],[77,54,77,29],[77,55,77,30,"json"],[77,59,77,21],[77,61,26,0],[79,0,26,0],[80,0,77,8,"json"],[80,12,77,8,"json"],[80,16,26,0],[81,0,26,0],[81,45,78,9,"json"],[81,49,78,13],[81,50,78,14,"stack"],[81,55,26,0],[83,0,26,0],[84,0,26,0],[85,0,26,0],[86,0,26,0],[87,0,26,0],[88,0,26,0],[89,0,26,0],[91,0,81,0,"module"],[91,2,81,0,"module"],[91,8,81,6],[91,9,81,7,"exports"],[91,16,81,0],[91,19,81,17,"symbolicateStackTrace"],[91,40,81,0]],"functionMap":{"names":["<global>","isSourcedFromDisk","symbolicateStackTrace","stack.map$argument_0"],"mappings":"AAA;ACqB;CDE;AEE;0BC4B;KDgB;CFS"}},"type":"js/module"}]}
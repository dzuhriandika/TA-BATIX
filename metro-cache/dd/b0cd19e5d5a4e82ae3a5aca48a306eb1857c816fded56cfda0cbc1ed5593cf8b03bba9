{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"./AnimatedWithChildren","data":{"isAsync":false}},{"name":"../NativeAnimatedHelper","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"../../../Color/normalizeColor","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\");\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/defineProperty\");\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\");\n\n  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8], \"./AnimatedWithChildren\");\n\n  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9], \"../NativeAnimatedHelper\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[10], \"invariant\");\n\n  var normalizeColor = _$$_REQUIRE(_dependencyMap[11], \"../../../Color/normalizeColor\");\n\n  var linear = function linear(t) {\n    return t;\n  };\n\n  function createInterpolation(config) {\n    if (config.outputRange && typeof config.outputRange[0] === 'string') {\n      return createInterpolationFromStringOutputRange(config);\n    }\n\n    var outputRange = config.outputRange;\n    checkInfiniteRange('outputRange', outputRange);\n    var inputRange = config.inputRange;\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n    var easing = config.easing || linear;\n    var extrapolateLeft = 'extend';\n\n    if (config.extrapolateLeft !== undefined) {\n      extrapolateLeft = config.extrapolateLeft;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateLeft = config.extrapolate;\n    }\n\n    var extrapolateRight = 'extend';\n\n    if (config.extrapolateRight !== undefined) {\n      extrapolateRight = config.extrapolateRight;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateRight = config.extrapolate;\n    }\n\n    return function (input) {\n      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n      var range = findRange(input, inputRange);\n      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n    };\n  }\n\n  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n    var result = input;\n\n    if (result < inputMin) {\n      if (extrapolateLeft === 'identity') {\n        return result;\n      } else if (extrapolateLeft === 'clamp') {\n        result = inputMin;\n      } else if (extrapolateLeft === 'extend') {}\n    }\n\n    if (result > inputMax) {\n      if (extrapolateRight === 'identity') {\n        return result;\n      } else if (extrapolateRight === 'clamp') {\n        result = inputMax;\n      } else if (extrapolateRight === 'extend') {}\n    }\n\n    if (outputMin === outputMax) {\n      return outputMin;\n    }\n\n    if (inputMin === inputMax) {\n      if (input <= inputMin) {\n        return outputMin;\n      }\n\n      return outputMax;\n    }\n\n    if (inputMin === -Infinity) {\n      result = -result;\n    } else if (inputMax === Infinity) {\n      result = result - inputMin;\n    } else {\n      result = (result - inputMin) / (inputMax - inputMin);\n    }\n\n    result = easing(result);\n\n    if (outputMin === -Infinity) {\n      result = -result;\n    } else if (outputMax === Infinity) {\n      result = result + outputMin;\n    } else {\n      result = result * (outputMax - outputMin) + outputMin;\n    }\n\n    return result;\n  }\n\n  function colorToRgba(input) {\n    var int32Color = normalizeColor(input);\n\n    if (int32Color === null) {\n      return input;\n    }\n\n    int32Color = int32Color || 0;\n    var r = (int32Color & 0xff000000) >>> 24;\n    var g = (int32Color & 0x00ff0000) >>> 16;\n    var b = (int32Color & 0x0000ff00) >>> 8;\n    var a = (int32Color & 0x000000ff) / 255;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n  }\n\n  var stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n  function createInterpolationFromStringOutputRange(config) {\n    var outputRange = config.outputRange;\n    invariant(outputRange.length >= 2, 'Bad output range');\n    outputRange = outputRange.map(colorToRgba);\n    checkPattern(outputRange);\n    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n      return [];\n    });\n    outputRange.forEach(function (value) {\n      value.match(stringShapeRegex).forEach(function (number, i) {\n        outputRanges[i].push(+number);\n      });\n    });\n    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n      return createInterpolation(_objectSpread({}, config, {\n        outputRange: outputRanges[i]\n      }));\n    });\n    var shouldRound = isRgbOrRgba(outputRange[0]);\n    return function (input) {\n      var i = 0;\n      return outputRange[0].replace(stringShapeRegex, function () {\n        var val = +interpolations[i++](input);\n\n        if (shouldRound) {\n          val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n        }\n\n        return String(val);\n      });\n    };\n  }\n\n  function isRgbOrRgba(range) {\n    return typeof range === 'string' && range.startsWith('rgb');\n  }\n\n  function checkPattern(arr) {\n    var pattern = arr[0].replace(stringShapeRegex, '');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n    }\n  }\n\n  function findRange(input, inputRange) {\n    var i;\n\n    for (i = 1; i < inputRange.length - 1; ++i) {\n      if (inputRange[i] >= input) {\n        break;\n      }\n    }\n\n    return i - 1;\n  }\n\n  function checkValidInputRange(arr) {\n    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n    }\n  }\n\n  function checkInfiniteRange(name, arr) {\n    invariant(arr.length >= 2, name + ' must have at least 2 elements');\n    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n  }\n\n  var AnimatedInterpolation = function (_AnimatedWithChildren) {\n    _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n    function AnimatedInterpolation(parent, config) {\n      var _this;\n\n      _classCallCheck(this, AnimatedInterpolation);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));\n      _this._parent = parent;\n      _this._config = config;\n      _this._interpolation = createInterpolation(config);\n      return _this;\n    }\n\n    _createClass(AnimatedInterpolation, [{\n      key: \"__makeNative\",\n      value: function __makeNative() {\n        this._parent.__makeNative();\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n      }\n    }, {\n      key: \"__getValue\",\n      value: function __getValue() {\n        var parentValue = this._parent.__getValue();\n\n        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n        return this._interpolation(parentValue);\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(config) {\n        return new AnimatedInterpolation(this, config);\n      }\n    }, {\n      key: \"__attach\",\n      value: function __attach() {\n        this._parent.__addChild(this);\n      }\n    }, {\n      key: \"__detach\",\n      value: function __detach() {\n        this._parent.__removeChild(this);\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n      }\n    }, {\n      key: \"__transformDataType\",\n      value: function __transformDataType(range) {\n        return range.map(NativeAnimatedHelper.transformDataType);\n      }\n    }, {\n      key: \"__getNativeConfig\",\n      value: function __getNativeConfig() {\n        if (__DEV__) {\n          NativeAnimatedHelper.validateInterpolation(this._config);\n        }\n\n        return {\n          inputRange: this._config.inputRange,\n          outputRange: this.__transformDataType(this._config.outputRange),\n          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n          type: 'interpolation'\n        };\n      }\n    }]);\n\n    return AnimatedInterpolation;\n  }(AnimatedWithChildren);\n\n  AnimatedInterpolation.__createInterpolation = createInterpolation;\n  module.exports = AnimatedInterpolation;\n});","lineCount":284,"map":[[2,0,11,0],[22,0,13,0],[22,6,13,6,"AnimatedNode"],[22,18,13,18],[22,21,13,21,"require"],[22,32,13,28],[22,69,13,0],[24,0,14,0],[24,6,14,6,"AnimatedWithChildren"],[24,26,14,26],[24,29,14,29,"require"],[24,40,14,36],[24,85,14,0],[26,0,15,0],[26,6,15,6,"NativeAnimatedHelper"],[26,26,15,26],[26,29,15,29,"require"],[26,40,15,36],[26,86,15,0],[28,0,17,0],[28,6,17,6,"invariant"],[28,15,17,15],[28,18,17,18,"require"],[28,29,17,25],[28,62,17,0],[30,0,18,0],[30,6,18,6,"normalizeColor"],[30,20,18,20],[30,23,18,23,"require"],[30,34,18,30],[30,87,18,0],[32,0,35,0],[32,6,35,6,"linear"],[32,12,35,12],[32,15,35,15],[32,24,35,6,"linear"],[32,30,35,15],[32,31,35,15,"t"],[32,32,35,16],[33,0,35,16],[33,11,35,20,"t"],[33,12,35,16],[34,0,35,16],[34,3,35,0],[36,0,41,0],[36,11,41,9,"createInterpolation"],[36,30,41,0],[36,31,42,2,"config"],[36,37,41,0],[36,39,43,38],[37,0,44,2],[37,8,44,6,"config"],[37,14,44,12],[37,15,44,13,"outputRange"],[37,26,44,6],[37,30,44,28],[37,37,44,35,"config"],[37,43,44,41],[37,44,44,42,"outputRange"],[37,55,44,35],[37,56,44,54],[37,57,44,35],[37,58,44,28],[37,63,44,61],[37,71,44,2],[37,73,44,71],[38,0,45,4],[38,13,45,11,"createInterpolationFromStringOutputRange"],[38,53,45,51],[38,54,45,52,"config"],[38,60,45,51],[38,61,45,4],[39,0,46,3],[41,0,48,2],[41,8,48,8,"outputRange"],[41,19,48,34],[41,22,48,38,"config"],[41,28,48,44],[41,29,48,45,"outputRange"],[41,40,48,2],[42,0,49,2,"checkInfiniteRange"],[42,4,49,2,"checkInfiniteRange"],[42,22,49,20],[42,23,49,21],[42,36,49,20],[42,38,49,36,"outputRange"],[42,49,49,20],[42,50,49,2],[43,0,51,2],[43,8,51,8,"inputRange"],[43,18,51,18],[43,21,51,21,"config"],[43,27,51,27],[43,28,51,28,"inputRange"],[43,38,51,2],[44,0,52,2,"checkInfiniteRange"],[44,4,52,2,"checkInfiniteRange"],[44,22,52,20],[44,23,52,21],[44,35,52,20],[44,37,52,35,"inputRange"],[44,47,52,20],[44,48,52,2],[45,0,53,2,"checkValidInputRange"],[45,4,53,2,"checkValidInputRange"],[45,24,53,22],[45,25,53,23,"inputRange"],[45,35,53,22],[45,36,53,2],[46,0,55,2,"invariant"],[46,4,55,2,"invariant"],[46,13,55,11],[46,14,56,4,"inputRange"],[46,24,56,14],[46,25,56,15,"length"],[46,31,56,4],[46,36,56,26,"outputRange"],[46,47,56,37],[46,48,56,38,"length"],[46,54,55,11],[46,56,57,4],[46,73,58,6,"inputRange"],[46,83,58,16],[46,84,58,17,"length"],[46,90,57,4],[46,93,59,6],[46,114,57,4],[46,117,60,6,"outputRange"],[46,128,60,17],[46,129,60,18,"length"],[46,135,57,4],[46,138,61,6],[46,167,55,11],[46,168,55,2],[47,0,64,2],[47,8,64,8,"easing"],[47,14,64,14],[47,17,64,17,"config"],[47,23,64,23],[47,24,64,24,"easing"],[47,30,64,17],[47,34,64,34,"linear"],[47,40,64,2],[48,0,66,2],[48,8,66,6,"extrapolateLeft"],[48,23,66,38],[48,26,66,41],[48,34,66,2],[50,0,67,2],[50,8,67,6,"config"],[50,14,67,12],[50,15,67,13,"extrapolateLeft"],[50,30,67,6],[50,35,67,33,"undefined"],[50,44,67,2],[50,46,67,44],[51,0,68,4,"extrapolateLeft"],[51,6,68,4,"extrapolateLeft"],[51,21,68,19],[51,24,68,22,"config"],[51,30,68,28],[51,31,68,29,"extrapolateLeft"],[51,46,68,4],[52,0,69,3],[52,5,67,2],[52,11,69,9],[52,15,69,13,"config"],[52,21,69,19],[52,22,69,20,"extrapolate"],[52,33,69,13],[52,38,69,36,"undefined"],[52,47,69,9],[52,49,69,47],[53,0,70,4,"extrapolateLeft"],[53,6,70,4,"extrapolateLeft"],[53,21,70,19],[53,24,70,22,"config"],[53,30,70,28],[53,31,70,29,"extrapolate"],[53,42,70,4],[54,0,71,3],[56,0,73,2],[56,8,73,6,"extrapolateRight"],[56,24,73,39],[56,27,73,42],[56,35,73,2],[58,0,74,2],[58,8,74,6,"config"],[58,14,74,12],[58,15,74,13,"extrapolateRight"],[58,31,74,6],[58,36,74,34,"undefined"],[58,45,74,2],[58,47,74,45],[59,0,75,4,"extrapolateRight"],[59,6,75,4,"extrapolateRight"],[59,22,75,20],[59,25,75,23,"config"],[59,31,75,29],[59,32,75,30,"extrapolateRight"],[59,48,75,4],[60,0,76,3],[60,5,74,2],[60,11,76,9],[60,15,76,13,"config"],[60,21,76,19],[60,22,76,20,"extrapolate"],[60,33,76,13],[60,38,76,36,"undefined"],[60,47,76,9],[60,49,76,47],[61,0,77,4,"extrapolateRight"],[61,6,77,4,"extrapolateRight"],[61,22,77,20],[61,25,77,23,"config"],[61,31,77,29],[61,32,77,30,"extrapolate"],[61,43,77,4],[62,0,78,3],[64,0,80,2],[64,11,80,9],[64,21,80,9,"input"],[64,26,80,14],[64,28,80,18],[65,0,81,4,"invariant"],[65,6,81,4,"invariant"],[65,15,81,13],[65,16,82,6],[65,23,82,13,"input"],[65,28,82,6],[65,33,82,23],[65,41,81,13],[65,43,83,6],[65,96,81,13],[65,97,81,4],[66,0,86,4],[66,10,86,10,"range"],[66,15,86,15],[66,18,86,18,"findRange"],[66,27,86,27],[66,28,86,28,"input"],[66,33,86,27],[66,35,86,35,"inputRange"],[66,45,86,27],[66,46,86,4],[67,0,87,4],[67,13,87,11,"interpolate"],[67,24,87,22],[67,25,88,6,"input"],[67,30,87,22],[67,32,89,6,"inputRange"],[67,42,89,16],[67,43,89,17,"range"],[67,48,89,16],[67,49,87,22],[67,51,90,6,"inputRange"],[67,61,90,16],[67,62,90,17,"range"],[67,67,90,22],[67,70,90,25],[67,71,90,16],[67,72,87,22],[67,74,91,6,"outputRange"],[67,85,91,17],[67,86,91,18,"range"],[67,91,91,17],[67,92,87,22],[67,94,92,6,"outputRange"],[67,105,92,17],[67,106,92,18,"range"],[67,111,92,23],[67,114,92,26],[67,115,92,17],[67,116,87,22],[67,118,93,6,"easing"],[67,124,87,22],[67,126,94,6,"extrapolateLeft"],[67,141,87,22],[67,143,95,6,"extrapolateRight"],[67,159,87,22],[67,160,87,4],[68,0,97,3],[68,5,80,2],[69,0,98,1],[71,0,100,0],[71,11,100,9,"interpolate"],[71,22,100,0],[71,23,101,2,"input"],[71,28,100,0],[71,30,102,2,"inputMin"],[71,38,100,0],[71,40,103,2,"inputMax"],[71,48,100,0],[71,50,104,2,"outputMin"],[71,59,100,0],[71,61,105,2,"outputMax"],[71,70,100,0],[71,72,106,2,"easing"],[71,78,100,0],[71,80,107,2,"extrapolateLeft"],[71,95,100,0],[71,97,108,2,"extrapolateRight"],[71,113,100,0],[71,115,109,2],[72,0,110,2],[72,8,110,6,"result"],[72,14,110,12],[72,17,110,15,"input"],[72,22,110,2],[74,0,113,2],[74,8,113,6,"result"],[74,14,113,12],[74,17,113,15,"inputMin"],[74,25,113,2],[74,27,113,25],[75,0,114,4],[75,10,114,8,"extrapolateLeft"],[75,25,114,23],[75,30,114,28],[75,40,114,4],[75,42,114,40],[76,0,115,6],[76,15,115,13,"result"],[76,21,115,6],[77,0,116,5],[77,7,114,4],[77,13,116,11],[77,17,116,15,"extrapolateLeft"],[77,32,116,30],[77,37,116,35],[77,44,116,11],[77,46,116,44],[78,0,117,6,"result"],[78,8,117,6,"result"],[78,14,117,12],[78,17,117,15,"inputMin"],[78,25,117,6],[79,0,118,5],[79,7,116,11],[79,13,118,11],[79,17,118,15,"extrapolateLeft"],[79,32,118,30],[79,37,118,35],[79,45,118,11],[79,47,118,45],[79,48,120,5],[80,0,121,3],[82,0,123,2],[82,8,123,6,"result"],[82,14,123,12],[82,17,123,15,"inputMax"],[82,25,123,2],[82,27,123,25],[83,0,124,4],[83,10,124,8,"extrapolateRight"],[83,26,124,24],[83,31,124,29],[83,41,124,4],[83,43,124,41],[84,0,125,6],[84,15,125,13,"result"],[84,21,125,6],[85,0,126,5],[85,7,124,4],[85,13,126,11],[85,17,126,15,"extrapolateRight"],[85,33,126,31],[85,38,126,36],[85,45,126,11],[85,47,126,45],[86,0,127,6,"result"],[86,8,127,6,"result"],[86,14,127,12],[86,17,127,15,"inputMax"],[86,25,127,6],[87,0,128,5],[87,7,126,11],[87,13,128,11],[87,17,128,15,"extrapolateRight"],[87,33,128,31],[87,38,128,36],[87,46,128,11],[87,48,128,46],[87,49,130,5],[88,0,131,3],[90,0,133,2],[90,8,133,6,"outputMin"],[90,17,133,15],[90,22,133,20,"outputMax"],[90,31,133,2],[90,33,133,31],[91,0,134,4],[91,13,134,11,"outputMin"],[91,22,134,4],[92,0,135,3],[94,0,137,2],[94,8,137,6,"inputMin"],[94,16,137,14],[94,21,137,19,"inputMax"],[94,29,137,2],[94,31,137,29],[95,0,138,4],[95,10,138,8,"input"],[95,15,138,13],[95,19,138,17,"inputMin"],[95,27,138,4],[95,29,138,27],[96,0,139,6],[96,15,139,13,"outputMin"],[96,24,139,6],[97,0,140,5],[99,0,141,4],[99,13,141,11,"outputMax"],[99,22,141,4],[100,0,142,3],[102,0,145,2],[102,8,145,6,"inputMin"],[102,16,145,14],[102,21,145,19],[102,22,145,20,"Infinity"],[102,30,145,2],[102,32,145,30],[103,0,146,4,"result"],[103,6,146,4,"result"],[103,12,146,10],[103,15,146,13],[103,16,146,14,"result"],[103,22,146,4],[104,0,147,3],[104,5,145,2],[104,11,147,9],[104,15,147,13,"inputMax"],[104,23,147,21],[104,28,147,26,"Infinity"],[104,36,147,9],[104,38,147,36],[105,0,148,4,"result"],[105,6,148,4,"result"],[105,12,148,10],[105,15,148,13,"result"],[105,21,148,19],[105,24,148,22,"inputMin"],[105,32,148,4],[106,0,149,3],[106,5,147,9],[106,11,149,9],[107,0,150,4,"result"],[107,6,150,4,"result"],[107,12,150,10],[107,15,150,13],[107,16,150,14,"result"],[107,22,150,20],[107,25,150,23,"inputMin"],[107,33,150,13],[107,38,150,36,"inputMax"],[107,46,150,44],[107,49,150,47,"inputMin"],[107,57,150,13],[107,58,150,4],[108,0,151,3],[110,0,154,2,"result"],[110,4,154,2,"result"],[110,10,154,8],[110,13,154,11,"easing"],[110,19,154,17],[110,20,154,18,"result"],[110,26,154,17],[110,27,154,2],[112,0,157,2],[112,8,157,6,"outputMin"],[112,17,157,15],[112,22,157,20],[112,23,157,21,"Infinity"],[112,31,157,2],[112,33,157,31],[113,0,158,4,"result"],[113,6,158,4,"result"],[113,12,158,10],[113,15,158,13],[113,16,158,14,"result"],[113,22,158,4],[114,0,159,3],[114,5,157,2],[114,11,159,9],[114,15,159,13,"outputMax"],[114,24,159,22],[114,29,159,27,"Infinity"],[114,37,159,9],[114,39,159,37],[115,0,160,4,"result"],[115,6,160,4,"result"],[115,12,160,10],[115,15,160,13,"result"],[115,21,160,19],[115,24,160,22,"outputMin"],[115,33,160,4],[116,0,161,3],[116,5,159,9],[116,11,161,9],[117,0,162,4,"result"],[117,6,162,4,"result"],[117,12,162,10],[117,15,162,13,"result"],[117,21,162,19],[117,25,162,23,"outputMax"],[117,34,162,32],[117,37,162,35,"outputMin"],[117,46,162,19],[117,47,162,13],[117,50,162,48,"outputMin"],[117,59,162,4],[118,0,163,3],[120,0,165,2],[120,11,165,9,"result"],[120,17,165,2],[121,0,166,1],[123,0,168,0],[123,11,168,9,"colorToRgba"],[123,22,168,0],[123,23,168,21,"input"],[123,28,168,0],[123,30,168,44],[124,0,169,2],[124,8,169,6,"int32Color"],[124,18,169,16],[124,21,169,19,"normalizeColor"],[124,35,169,33],[124,36,169,34,"input"],[124,41,169,33],[124,42,169,2],[126,0,170,2],[126,8,170,6,"int32Color"],[126,18,170,16],[126,23,170,21],[126,27,170,2],[126,29,170,27],[127,0,171,4],[127,13,171,11,"input"],[127,18,171,4],[128,0,172,3],[130,0,174,2,"int32Color"],[130,4,174,2,"int32Color"],[130,14,174,12],[130,17,174,15,"int32Color"],[130,27,174,25],[130,31,174,29],[130,32,174,2],[131,0,176,2],[131,8,176,8,"r"],[131,9,176,9],[131,12,176,12],[131,13,176,13,"int32Color"],[131,23,176,23],[131,26,176,26],[131,36,176,12],[131,42,176,42],[131,44,176,2],[132,0,177,2],[132,8,177,8,"g"],[132,9,177,9],[132,12,177,12],[132,13,177,13,"int32Color"],[132,23,177,23],[132,26,177,26],[132,36,177,12],[132,42,177,42],[132,44,177,2],[133,0,178,2],[133,8,178,8,"b"],[133,9,178,9],[133,12,178,12],[133,13,178,13,"int32Color"],[133,23,178,23],[133,26,178,26],[133,36,178,12],[133,42,178,42],[133,43,178,2],[134,0,179,2],[134,8,179,8,"a"],[134,9,179,9],[134,12,179,12],[134,13,179,13,"int32Color"],[134,23,179,23],[134,26,179,26],[134,36,179,12],[134,40,179,40],[134,43,179,2],[135,0,181,2],[135,21,181,17,"r"],[135,22,181,2],[135,32,181,23,"g"],[135,33,181,2],[135,43,181,29,"b"],[135,44,181,2],[135,54,181,35,"a"],[135,55,181,2],[136,0,182,1],[138,0,184,0],[138,6,184,6,"stringShapeRegex"],[138,22,184,22],[138,25,184,25],[138,69,184,0],[140,0,194,0],[140,11,194,9,"createInterpolationFromStringOutputRange"],[140,51,194,0],[140,52,195,2,"config"],[140,58,194,0],[140,60,196,29],[141,0,197,2],[141,8,197,6,"outputRange"],[141,19,197,32],[141,22,197,36,"config"],[141,28,197,42],[141,29,197,43,"outputRange"],[141,40,197,2],[142,0,198,2,"invariant"],[142,4,198,2,"invariant"],[142,13,198,11],[142,14,198,12,"outputRange"],[142,25,198,23],[142,26,198,24,"length"],[142,32,198,12],[142,36,198,34],[142,37,198,11],[142,39,198,37],[142,57,198,11],[142,58,198,2],[143,0,199,2,"outputRange"],[143,4,199,2,"outputRange"],[143,15,199,13],[143,18,199,16,"outputRange"],[143,29,199,27],[143,30,199,28,"map"],[143,33,199,16],[143,34,199,32,"colorToRgba"],[143,45,199,16],[143,46,199,2],[144,0,200,2,"checkPattern"],[144,4,200,2,"checkPattern"],[144,16,200,14],[144,17,200,15,"outputRange"],[144,28,200,14],[144,29,200,2],[145,0,213,2],[145,8,213,8,"outputRanges"],[145,20,213,20],[145,23,213,23,"outputRange"],[145,34,213,34],[145,35,213,35],[145,36,213,34],[145,37,213,23],[145,38,213,38,"match"],[145,43,213,23],[145,44,213,44,"stringShapeRegex"],[145,60,213,23],[145,62,213,62,"map"],[145,65,213,23],[145,66,213,66],[146,0,213,66],[146,13,213,72],[146,15,213,66],[147,0,213,66],[147,5,213,23],[147,6,213,2],[148,0,214,2,"outputRange"],[148,4,214,2,"outputRange"],[148,15,214,13],[148,16,214,14,"forEach"],[148,23,214,2],[148,24,214,22],[148,34,214,22,"value"],[148,39,214,27],[148,41,214,31],[149,0,218,4,"value"],[149,6,218,4,"value"],[149,11,218,9],[149,12,218,10,"match"],[149,17,218,4],[149,18,218,16,"stringShapeRegex"],[149,34,218,4],[149,36,218,34,"forEach"],[149,43,218,4],[149,44,218,42],[149,54,218,43,"number"],[149,60,218,42],[149,62,218,51,"i"],[149,63,218,42],[149,65,218,57],[150,0,219,6,"outputRanges"],[150,8,219,6,"outputRanges"],[150,20,219,18],[150,21,219,19,"i"],[150,22,219,18],[150,23,219,6],[150,24,219,22,"push"],[150,28,219,6],[150,29,219,27],[150,30,219,28,"number"],[150,36,219,6],[151,0,220,5],[151,7,218,4],[152,0,221,3],[152,5,214,2],[153,0,226,2],[153,8,226,8,"interpolations"],[153,22,226,22],[153,25,226,25,"outputRange"],[153,36,226,36],[153,37,226,37],[153,38,226,36],[153,39,226,25],[153,40,227,5,"match"],[153,45,226,25],[153,46,227,11,"stringShapeRegex"],[153,62,226,25],[153,64,228,5,"map"],[153,67,226,25],[153,68,228,9],[153,78,228,10,"value"],[153,83,228,9],[153,85,228,17,"i"],[153,86,228,9],[153,88,228,23],[154,0,229,6],[154,13,229,13,"createInterpolation"],[154,32,229,32],[154,51,230,11,"config"],[154,57,229,32],[155,0,231,8,"outputRange"],[155,8,231,8,"outputRange"],[155,19,231,19],[155,21,231,21,"outputRanges"],[155,33,231,33],[155,34,231,34,"i"],[155,35,231,33],[156,0,229,32],[156,9,229,6],[157,0,233,5],[157,5,226,25],[157,6,226,2],[158,0,237,2],[158,8,237,8,"shouldRound"],[158,19,237,19],[158,22,237,22,"isRgbOrRgba"],[158,33,237,33],[158,34,237,34,"outputRange"],[158,45,237,45],[158,46,237,46],[158,47,237,45],[158,48,237,33],[158,49,237,2],[159,0,239,2],[159,11,239,9],[159,21,239,9,"input"],[159,26,239,14],[159,28,239,18],[160,0,240,4],[160,10,240,8,"i"],[160,11,240,9],[160,14,240,12],[160,15,240,4],[161,0,244,4],[161,13,244,11,"outputRange"],[161,24,244,22],[161,25,244,23],[161,26,244,22],[161,27,244,11],[161,28,244,26,"replace"],[161,35,244,11],[161,36,244,34,"stringShapeRegex"],[161,52,244,11],[161,54,244,52],[161,66,244,58],[162,0,245,6],[162,12,245,10,"val"],[162,15,245,13],[162,18,245,16],[162,19,245,17,"interpolations"],[162,33,245,31],[162,34,245,32,"i"],[162,35,245,33],[162,37,245,31],[162,38,245,17],[162,39,245,37,"input"],[162,44,245,17],[162,45,245,6],[164,0,246,6],[164,12,246,10,"shouldRound"],[164,23,246,6],[164,25,246,23],[165,0,247,8,"val"],[165,10,247,8,"val"],[165,13,247,11],[165,16,247,14,"i"],[165,17,247,15],[165,20,247,18],[165,21,247,14],[165,24,247,22,"Math"],[165,28,247,26],[165,29,247,27,"round"],[165,34,247,22],[165,35,247,33,"val"],[165,38,247,22],[165,39,247,14],[165,42,247,40,"Math"],[165,46,247,44],[165,47,247,45,"round"],[165,52,247,40],[165,53,247,51,"val"],[165,56,247,54],[165,59,247,57],[165,63,247,40],[165,67,247,65],[165,71,247,8],[166,0,248,7],[168,0,249,6],[168,15,249,13,"String"],[168,21,249,19],[168,22,249,20,"val"],[168,25,249,19],[168,26,249,6],[169,0,250,5],[169,7,244,11],[169,8,244,4],[170,0,251,3],[170,5,239,2],[171,0,252,1],[173,0,254,0],[173,11,254,9,"isRgbOrRgba"],[173,22,254,0],[173,23,254,21,"range"],[173,28,254,0],[173,30,254,28],[174,0,255,2],[174,11,255,9],[174,18,255,16,"range"],[174,23,255,9],[174,28,255,26],[174,36,255,9],[174,40,255,38,"range"],[174,45,255,43],[174,46,255,44,"startsWith"],[174,56,255,38],[174,57,255,55],[174,62,255,38],[174,63,255,2],[175,0,256,1],[177,0,258,0],[177,11,258,9,"checkPattern"],[177,23,258,0],[177,24,258,22,"arr"],[177,27,258,0],[177,29,258,42],[178,0,259,2],[178,8,259,8,"pattern"],[178,15,259,15],[178,18,259,18,"arr"],[178,21,259,21],[178,22,259,22],[178,23,259,21],[178,24,259,18],[178,25,259,25,"replace"],[178,32,259,18],[178,33,259,33,"stringShapeRegex"],[178,49,259,18],[178,51,259,51],[178,53,259,18],[178,54,259,2],[180,0,260,2],[180,9,260,7],[180,13,260,11,"i"],[180,14,260,12],[180,17,260,15],[180,18,260,2],[180,20,260,18,"i"],[180,21,260,19],[180,24,260,22,"arr"],[180,27,260,25],[180,28,260,26,"length"],[180,34,260,2],[180,36,260,34],[180,38,260,36,"i"],[180,39,260,2],[180,41,260,39],[181,0,261,4,"invariant"],[181,6,261,4,"invariant"],[181,15,261,13],[181,16,262,6,"pattern"],[181,23,262,13],[181,28,262,18,"arr"],[181,31,262,21],[181,32,262,22,"i"],[181,33,262,21],[181,34,262,18],[181,35,262,25,"replace"],[181,42,262,18],[181,43,262,33,"stringShapeRegex"],[181,59,262,18],[181,61,262,51],[181,63,262,18],[181,64,261,13],[181,66,263,6],[181,87,263,27,"arr"],[181,90,263,30],[181,91,263,31],[181,92,263,30],[181,93,263,6],[181,96,263,36],[181,103,263,6],[181,106,263,46,"arr"],[181,109,263,49],[181,110,263,50,"i"],[181,111,263,49],[181,112,261,13],[181,113,261,4],[182,0,265,3],[183,0,266,1],[185,0,268,0],[185,11,268,9,"findRange"],[185,20,268,0],[185,21,268,19,"input"],[185,26,268,0],[185,28,268,34,"inputRange"],[185,38,268,0],[185,40,268,61],[186,0,269,2],[186,8,269,6,"i"],[186,9,269,2],[188,0,270,2],[188,9,270,7,"i"],[188,10,270,8],[188,13,270,11],[188,14,270,2],[188,16,270,14,"i"],[188,17,270,15],[188,20,270,18,"inputRange"],[188,30,270,28],[188,31,270,29,"length"],[188,37,270,18],[188,40,270,38],[188,41,270,2],[188,43,270,41],[188,45,270,43,"i"],[188,46,270,2],[188,48,270,46],[189,0,271,4],[189,10,271,8,"inputRange"],[189,20,271,18],[189,21,271,19,"i"],[189,22,271,18],[189,23,271,8],[189,27,271,25,"input"],[189,32,271,4],[189,34,271,32],[190,0,272,6],[191,0,273,5],[192,0,274,3],[194,0,275,2],[194,11,275,9,"i"],[194,12,275,10],[194,15,275,13],[194,16,275,2],[195,0,276,1],[197,0,278,0],[197,11,278,9,"checkValidInputRange"],[197,31,278,0],[197,32,278,30,"arr"],[197,35,278,0],[197,37,278,50],[198,0,279,2,"invariant"],[198,4,279,2,"invariant"],[198,13,279,11],[198,14,279,12,"arr"],[198,17,279,15],[198,18,279,16,"length"],[198,24,279,12],[198,28,279,26],[198,29,279,11],[198,31,279,29],[198,73,279,11],[198,74,279,2],[200,0,280,2],[200,9,280,7],[200,13,280,11,"i"],[200,14,280,12],[200,17,280,15],[200,18,280,2],[200,20,280,18,"i"],[200,21,280,19],[200,24,280,22,"arr"],[200,27,280,25],[200,28,280,26,"length"],[200,34,280,2],[200,36,280,34],[200,38,280,36,"i"],[200,39,280,2],[200,41,280,39],[201,0,281,4,"invariant"],[201,6,281,4,"invariant"],[201,15,281,13],[201,16,282,6,"arr"],[201,19,282,9],[201,20,282,10,"i"],[201,21,282,9],[201,22,282,6],[201,26,282,16,"arr"],[201,29,282,19],[201,30,282,20,"i"],[201,31,282,21],[201,34,282,24],[201,35,282,19],[201,36,281,13],[201,38,289,6],[201,91,289,59,"arr"],[201,94,281,13],[201,95,281,4],[202,0,291,3],[203,0,292,1],[205,0,294,0],[205,11,294,9,"checkInfiniteRange"],[205,29,294,0],[205,30,294,28,"name"],[205,34,294,0],[205,36,294,42,"arr"],[205,39,294,0],[205,41,294,62],[206,0,295,2,"invariant"],[206,4,295,2,"invariant"],[206,13,295,11],[206,14,295,12,"arr"],[206,17,295,15],[206,18,295,16,"length"],[206,24,295,12],[206,28,295,26],[206,29,295,11],[206,31,295,29,"name"],[206,35,295,33],[206,38,295,36],[206,70,295,11],[206,71,295,2],[207,0,296,2,"invariant"],[207,4,296,2,"invariant"],[207,13,296,11],[207,14,297,4,"arr"],[207,17,297,7],[207,18,297,8,"length"],[207,24,297,4],[207,29,297,19],[207,30,297,4],[207,34,297,24,"arr"],[207,37,297,27],[207,38,297,28],[207,39,297,27],[207,40,297,24],[207,45,297,35],[207,46,297,36,"Infinity"],[207,54,297,4],[207,58,297,48,"arr"],[207,61,297,51],[207,62,297,52],[207,63,297,51],[207,64,297,48],[207,69,297,59,"Infinity"],[207,77,296,11],[207,79,304,4,"name"],[207,83,304,8],[207,86,304,11],[207,120,304,4],[207,123,304,48,"arr"],[207,126,296,11],[207,127,296,2],[208,0,306,1],[210,6,308,6,"AnimatedInterpolation"],[210,27],[213,0,318,2],[213,35,318,14,"parent"],[213,41,318,2],[213,43,318,36,"config"],[213,49,318,2],[213,51,318,69],[214,0,318,69],[216,0,318,69],[218,0,319,4],[219,0,320,4],[219,12,320,9,"_parent"],[219,19,320,4],[219,22,320,19,"parent"],[219,28,320,4],[220,0,321,4],[220,12,321,9,"_config"],[220,19,321,4],[220,22,321,19,"config"],[220,28,321,4],[221,0,322,4],[221,12,322,9,"_interpolation"],[221,26,322,4],[221,29,322,26,"createInterpolation"],[221,48,322,45],[221,49,322,46,"config"],[221,55,322,45],[221,56,322,4],[222,0,318,69],[223,0,323,3],[227,37,325,17],[228,0,326,4],[228,13,326,9,"_parent"],[228,20,326,4],[228,21,326,17,"__makeNative"],[228,33,326,4],[230,0,327,4],[231,0,328,3],[234,35,330,32],[235,0,331,4],[235,12,331,10,"parentValue"],[235,23,331,29],[235,26,331,32],[235,31,331,37,"_parent"],[235,38,331,32],[235,39,331,45,"__getValue"],[235,49,331,32],[235,51,331,4],[237,0,332,4,"invariant"],[237,8,332,4,"invariant"],[237,17,332,13],[237,18,333,6],[237,25,333,13,"parentValue"],[237,36,333,6],[237,41,333,29],[237,49,332,13],[237,51,334,6],[237,103,332,13],[237,104,332,4],[238,0,336,4],[238,15,336,11],[238,20,336,16,"_interpolation"],[238,34,336,11],[238,35,336,31,"parentValue"],[238,46,336,11],[238,47,336,4],[239,0,337,3],[242,34,339,14,"config"],[242,40],[242,42,339,70],[243,0,340,4],[243,15,340,11],[243,19,340,15,"AnimatedInterpolation"],[243,40,340,11],[243,41,340,37],[243,45,340,11],[243,47,340,43,"config"],[243,53,340,11],[243,54,340,4],[244,0,341,3],[247,33,343,19],[248,0,344,4],[248,13,344,9,"_parent"],[248,20,344,4],[248,21,344,17,"__addChild"],[248,31,344,4],[248,32,344,28],[248,36,344,4],[249,0,345,3],[252,33,347,19],[253,0,348,4],[253,13,348,9,"_parent"],[253,20,348,4],[253,21,348,17,"__removeChild"],[253,34,348,4],[253,35,348,31],[253,39,348,4],[255,0,349,4],[256,0,350,3],[259,42,352,22,"range"],[259,47],[259,49,352,53],[260,0,353,4],[260,15,353,11,"range"],[260,20,353,16],[260,21,353,17,"map"],[260,24,353,11],[260,25,353,21,"NativeAnimatedHelper"],[260,45,353,41],[260,46,353,42,"transformDataType"],[260,63,353,11],[260,64,353,4],[261,0,354,3],[264,42,356,27],[265,0,357,4],[265,12,357,8,"__DEV__"],[265,19,357,4],[265,21,357,17],[266,0,358,6,"NativeAnimatedHelper"],[266,10,358,6,"NativeAnimatedHelper"],[266,30,358,26],[266,31,358,27,"validateInterpolation"],[266,52,358,6],[266,53,358,49],[266,58,358,54,"_config"],[266,65,358,6],[267,0,359,5],[269,0,361,4],[269,15,361,11],[270,0,362,6,"inputRange"],[270,10,362,6,"inputRange"],[270,20,362,16],[270,22,362,18],[270,27,362,23,"_config"],[270,34,362,18],[270,35,362,31,"inputRange"],[270,45,361,11],[271,0,364,6,"outputRange"],[271,10,364,6,"outputRange"],[271,21,364,17],[271,23,364,19],[271,28,364,24,"__transformDataType"],[271,47,364,19],[271,48,364,44],[271,53,364,49,"_config"],[271,60,364,44],[271,61,364,57,"outputRange"],[271,72,364,19],[271,73,361,11],[272,0,365,6,"extrapolateLeft"],[272,10,365,6,"extrapolateLeft"],[272,25,365,21],[272,27,366,8],[272,32,366,13,"_config"],[272,39,366,8],[272,40,366,21,"extrapolateLeft"],[272,55,366,8],[272,59,366,40],[272,64,366,45,"_config"],[272,71,366,40],[272,72,366,53,"extrapolate"],[272,83,366,8],[272,87,366,68],[272,95,361,11],[273,0,367,6,"extrapolateRight"],[273,10,367,6,"extrapolateRight"],[273,26,367,22],[273,28,368,8],[273,33,368,13,"_config"],[273,40,368,8],[273,41,368,21,"extrapolateRight"],[273,57,368,8],[273,61,368,41],[273,66,368,46,"_config"],[273,73,368,41],[273,74,368,54,"extrapolate"],[273,85,368,8],[273,89,368,69],[273,97,361,11],[274,0,369,6,"type"],[274,10,369,6,"type"],[274,14,369,10],[274,16,369,12],[275,0,361,11],[275,9,361,4],[276,0,371,3],[280,4,308,36,"AnimatedWithChildren"],[280,24],[282,0,308,6,"AnimatedInterpolation"],[282,2,308,6,"AnimatedInterpolation"],[282,23],[282,24,310,9,"__createInterpolation"],[282,45],[282,48,312,44,"createInterpolation"],[282,67],[283,0,374,0,"module"],[283,2,374,0,"module"],[283,8,374,6],[283,9,374,7,"exports"],[283,16,374,0],[283,19,374,17,"AnimatedInterpolation"],[283,40,374,0]],"functionMap":{"names":["<global>","linear","createInterpolation","<anonymous>","interpolate","colorToRgba","createInterpolationFromStringOutputRange","outputRange._.match.map$argument_0","outputRange.forEach$argument_0","value.match.forEach$argument_0","outputRange._.replace$argument_1","isRgbOrRgba","checkPattern","findRange","checkValidInputRange","checkInfiniteRange","AnimatedInterpolation","constructor","__makeNative","__getValue","__attach","__detach","__transformDataType","__getNativeConfig"],"mappings":"AAA;eCkC,MD;AEM;SCuC;GDiB;CFC;AIE;CJkE;AKE;CLc;AMY;kECmB,QD;sBEC;0CCI;KDE;GFC;SCO;KDK;SHM;oDOK;KPM;GGC;CNC;AWE;CXE;AYE;CZQ;AaE;CbQ;AcE;Cdc;AeE;CfY;AgBE;ECU;GDK;EEE;GFG;EGE;GHO;EZE;GYE;EIE;GJE;EKE;GLG;EME;GNE;EOE;GPe;ChBC"}},"type":"js/module"}]}